{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-BoldOblique;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red88\green118\blue71;
\red153\green168\blue186;\red254\green187\blue91;\red109\green109\blue109;\red86\green132\blue173;\red133\green96\blue154;
\red225\green179\blue88;\red172\green172\blue172;}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c34510\c46275\c27843;
\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c52157\c37647\c60392;
\csgenericrgb\c88235\c70196\c34510;\csgenericrgb\c67451\c67451\c67451;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 import \cf4 "./Style.css"\cf2 ;\
import \cf5 \{ \cf6 useRef\cf2 , \cf6 useState \cf5 \} \cf2 from \cf4 "react"\cf2 ;\
\
const \cf6 App \cf5 = () => \{\
  \cf7 // states\
  \cf2 const \cf5 [height\cf2 , \cf5 setHeight] = \cf6 useState\cf5 (\cf8 0\cf5 )\cf2 ;\
  const \cf5 [width\cf2 , \cf5 setWidth] = \cf6 useState\cf5 (\cf8 0\cf5 )\cf2 ;\
  const \cf5 [x\cf2 , \cf5 setX] = \cf6 useState\cf5 (\cf8 0\cf5 )\cf2 ;\
  const \cf5 [y\cf2 , \cf5 setY] = \cf6 useState\cf5 (\cf8 0\cf5 )\cf2 ;\
  const \cf5 [squares\cf2 , \cf5 setSquares] = \cf6 useState\cf5 ([])\cf2 ;\
  const \cf5 [filled\cf2 , \cf5 setFilled] = \cf6 useState\cf5 (\cf2 false\cf5 )\
\
  \cf7 // define constants\
  \cf2 const \cf5 boardWidth = \cf8 1000\cf2 ;\
  const \cf5 boardHeight = \cf8 1000\cf2 ;\
  const \cf5 rectMargin = \cf8 16\cf2 ;\
  const \cf5 minRectLen = \cf8 50\cf2 ;\
\
  \cf7 // on click function\
  \cf2 const \cf6 onClick \cf5 = () => \{\
    \cf2 let \cf5 wasAdded = \cf2 false\
    if \cf5 (!filled) \{\
      \cf2 const \cf5 squareLeft = 
\f1\i\b \cf9 Math
\f0\i0\b0 \cf5 .\cf6 max\cf5 (\cf8 0\cf2 , 
\f1\i\b \cf9 Math
\f0\i0\b0 \cf5 .\cf6 floor\cf5 (
\f1\i\b \cf9 Math
\f0\i0\b0 \cf5 .\cf6 random\cf5 () * boardWidth) - minRectLen - rectMargin) \cf7 // 
\f2 \uc0\u55357 \u56392 \u55356 \u57340 
\f0  Horizontally\
      \cf2 const \cf5 squareTop = 
\f1\i\b \cf9 Math
\f0\i0\b0 \cf5 .\cf6 max\cf5 (\cf8 0\cf2 , 
\f1\i\b \cf9 Math
\f0\i0\b0 \cf5 .\cf6 floor\cf5 (
\f1\i\b \cf9 Math
\f0\i0\b0 \cf5 .\cf6 random\cf5 () * boardHeight) - minRectLen - rectMargin) \cf7 // 
\f2 \uc0\u55357 \u56392 \u55356 \u57340 
\f0  Vertically\
\
      \cf2 let \cf5 dimensions = \cf6 generateWidthAndHeight\cf5 ()\
      \cf2 const \cf5 originalHeight = dimensions.height\
      \cf2 const \cf5 originalWidth = dimensions.width\
      wasAdded = \cf6 addRectangle\cf5 (squareLeft\cf2 , \cf5 squareTop\cf2 , \cf5 dimensions)\
\
      \cf7 // if space is filled for a large box, add the smallest possible height box\
      \cf2 if \cf5 (!wasAdded) \{\
        dimensions = \{width: originalWidth\cf2 , \cf5 height: minRectLen\}\
        wasAdded = \cf6 addRectangle\cf5 (squareLeft\cf2 , \cf5 squareTop\cf2 , \cf5 dimensions)\
      \}\
\
      \cf7 // add the smallest possible width box\
      \cf2 if \cf5 (!wasAdded) \{\
        dimensions = \{width: minRectLen\cf2 , \cf5 height: originalHeight\}\
        wasAdded = \cf6 addRectangle\cf5 (squareLeft\cf2 , \cf5 squareTop\cf2 , \cf5 dimensions)\
      \}\
\
      \cf7 // add the smallest possible height & width box\
      \cf2 if \cf5 (!wasAdded) \{\
        \cf2 const \cf5 dimensions = \{width: minRectLen\cf2 , \cf5 height: minRectLen\}\
        wasAdded = \cf6 addRectangle\cf5 (squareLeft\cf2 , \cf5 squareTop\cf2 , \cf5 dimensions)\
      \}\
    \}\
\
    \cf7 // if even the smallest possible box cannot be fit onto the board, then show an alert\
    \cf2 if \cf5 (!wasAdded || filled) \{\
      \cf6 alert\cf5 (\cf4 "Board Area is filed out, you can't add any more squares"\cf5 )\
      setFilled(\cf2 true\cf5 )\
    \}\
  \}\cf2 ;\
\
  \cf7 // clear board\
  \cf2 const \cf6 onClear \cf5 = () => \{\
    setFilled(\cf2 false\cf5 )\
    setSquares([])\cf2 ;\
  \cf5 \}\cf2 ;\
\
  \cf7 // generate width & height\
  \cf2 const \cf6 generateWidthAndHeight \cf5 = () => \{\
    \cf7 // generate width & height\
    \cf2 let \cf5 squareHeight = 
\f1\i\b \cf9 Math
\f0\i0\b0 \cf5 .\cf6 floor\cf5 (
\f1\i\b \cf9 Math
\f0\i0\b0 \cf5 .\cf6 random\cf5 () * \cf8 200 \cf5 + minRectLen)\cf2 ; \cf7 // (50, 250) range\
    \cf2 let \cf5 squareWidth = 
\f1\i\b \cf9 Math
\f0\i0\b0 \cf5 .\cf6 floor\cf5 (
\f1\i\b \cf9 Math
\f0\i0\b0 \cf5 .\cf6 random\cf5 () * \cf8 200 \cf5 + minRectLen)\cf2 ; \cf7 // (50, 250) range\
    \cf2 return \cf5 \{width: squareWidth\cf2 , \cf5 height: squareHeight\}\
  \}\
\
  \cf2 const \cf6 addRectangle \cf5 = (x\cf2 , \cf5 y\cf2 , \cf5 dimensions) => \{\
    \cf2 for \cf5 (\cf2 let \cf5 i = x\cf2 ; \cf5 i <= boardWidth + x\cf2 ; \cf5 i += minRectLen) \{\
      \cf2 for \cf5 (\cf2 let \cf5 j = y\cf2 ; \cf5 j <= boardHeight + y\cf2 ; \cf5 j += minRectLen) \{\
        \cf2 let \cf5 squareLeft = 
\f1\i\b \cf9 Math
\f0\i0\b0 \cf5 .\cf6 max\cf5 (\cf8 0\cf2 , \cf5 i % boardWidth - minRectLen - rectMargin)\
        \cf2 let \cf5 squareTop = 
\f1\i\b \cf9 Math
\f0\i0\b0 \cf5 .\cf6 max\cf5 (\cf8 0\cf2 , \cf5 j % boardHeight - minRectLen - rectMargin)\
\
        \cf7 // fix overflow\
        \cf2 if \cf5 (squareLeft + dimensions.\cf9 width \cf5 + rectMargin >= boardWidth) \{\
          dimensions.\cf9 width \cf5 = boardWidth - squareLeft - rectMargin\cf2 ;\
        \cf5 \}\
        \cf2 if \cf5 (squareTop + dimensions.\cf9 height \cf5 + rectMargin >= boardHeight) \{\
          dimensions.\cf9 height \cf5 = boardHeight - squareTop - rectMargin\cf2 ;\
        \cf5 \}\
\
        \cf7 // create rectangle\
        \cf2 const \cf5 rect = \{\
          \cf9 height\cf5 : dimensions.\cf9 height\cf2 ,\
          \cf9 width\cf5 : dimensions.\cf9 width\cf2 ,\
          \cf5 x: squareLeft\cf2 ,\
          \cf5 y: squareTop\cf2 ,\
        \cf5 \}\
\
        \cf7 // check for collision and add if no collision exists found\
        \cf2 if \cf5 (!\cf6 collidesWithAny\cf5 (rect)) \{\
          setWidth(rect.\cf9 width\cf5 )\
          setHeight(rect.\cf9 height\cf5 )\
          setX(rect.x)\
          setY(rect.y)\
          squares.\cf6 push\cf5 (rect)\
          \cf2 return true;\
        \cf5 \}\
      \}\
    \}\
    \cf2 return false\
  \cf5 \}\
\
  \cf7 // check if a rectangle collides with any other rectangles\
  \cf2 const \cf6 collidesWithAny \cf5 = (rect) => \{\
    \cf2 for \cf5 (\cf2 let \cf5 k = \cf8 0\cf2 ; \cf5 k < squares.\cf9 length\cf2 ; \cf5 k++) \{\
      \cf2 const \cf5 currentRect = squares[k]\
      \cf2 if \cf5 (\cf6 collides\cf5 (rect\cf2 , \cf5 currentRect)) \{\
        \cf2 return true\
      \cf5 \}\
    \}\
    \cf2 return false\
  \cf5 \}\
\
  \cf7 // if vertical and horizontal lines have common segments, then two rectangles collide.\
  \cf2 const \cf6 collides \cf5 = (rect1\cf2 , \cf5 rect2) => \{\
    \cf2 const \cf5 line1X = \{\cf9 x1\cf5 : rect1.\cf9 x\cf2 , \cf9 x2\cf5 : rect1.\cf9 x\cf5 +rect1.\cf9 width\cf5 \}\
    \cf2 const \cf5 line2X = \{\cf9 x1\cf5 : rect2.\cf9 x\cf2 , \cf9 x2\cf5 : rect2.\cf9 x\cf5 +rect2.\cf9 width\cf5 \}\
    \cf2 const \cf5 line1Y = \{\cf9 y1\cf5 : rect1.\cf9 y\cf2 , \cf9 y2\cf5 : rect1.\cf9 y\cf5 +rect1.\cf9 height\cf5 \}\
    \cf2 const \cf5 line2Y = \{\cf9 y1\cf5 : rect2.\cf9 y\cf2 , \cf9 y2\cf5 : rect2.\cf9 y\cf5 +rect2.\cf9 height\cf5 \}\
    \cf2 return \cf6 doLinesCollideX\cf5 (line1X\cf2 , \cf5 line2X) && \cf6 doLinesCollideY\cf5 (line1Y\cf2 , \cf5 line2Y)\
  \}\
\
  \cf7 // check if two horizontal lines collide\
  \cf2 const \cf6 doLinesCollideX \cf5 = (line1\cf2 , \cf5 line2) => \{\
    \cf2 return \cf5 (line1.\cf9 x1 \cf5 <= line2.\cf9 x2 \cf5 && line1.\cf9 x1 \cf5 >= line2.\cf9 x1\cf5 ) || (line1.\cf9 x2 \cf5 <= line2.\cf9 x2 \cf5 && line1.\cf9 x2 \cf5 >= line2.\cf9 x1\cf5 )\
        || (line2.\cf9 x1 \cf5 <= line1.\cf9 x2 \cf5 && line2.\cf9 x1 \cf5 >= line1.\cf9 x1\cf5 ) || (line2.\cf9 x2 \cf5 <= line1.\cf9 x2 \cf5 && line2.\cf9 x2 \cf5 >= line1.\cf9 x1\cf5 )\
  \}\
\
  \cf7 // check if two vertical lines collide\
  \cf2 const \cf6 doLinesCollideY \cf5 = (line1\cf2 , \cf5 line2) => \{\
    \cf2 return \cf5 (line1.\cf9 y1 \cf5 <= line2.\cf9 y2 \cf5 && line1.\cf9 y1 \cf5 >= line2.\cf9 y1\cf5 ) || (line1.\cf9 y2 \cf5 <= line2.\cf9 y2 \cf5 && line1.\cf9 y2 \cf5 >= line2.\cf9 y1\cf5 )\
        || (line2.\cf9 y1 \cf5 <= line1.\cf9 y2 \cf5 && line2.\cf9 y1 \cf5 >= line1.\cf9 y1\cf5 ) || (line2.\cf9 y2 \cf5 <= line1.\cf9 y2 \cf5 && line2.\cf9 y2 \cf5 >= line1.\cf9 y1\cf5 )\
  \}\
\
  \cf2 return \cf5 (\
    \cf10 <div \cf11 className\cf4 ="main"\cf10 >\
      <div>\
        <div \cf11 className\cf4 ="main-box"\cf10 >\
          \cf5 \{squares.\cf9 length \cf5 > \cf8 0 \cf5 ? (\
            squares.\cf6 map\cf5 ((square\cf2 , \cf5 i) => (\
              \cf10 <div\
                \cf11 className\cf4 ="boxes"\
                \cf11 style\cf4 =\cf5 \{\{\
                  \cf9 height\cf5 : square.\cf9 height\cf2 ,\
                  \cf9 width\cf5 : square.\cf9 width\cf2 ,\
                  \cf9 left\cf5 : square.\cf9 x\cf2 ,\
                  \cf9 top\cf5 : square.\cf9 y\cf2 ,\
                  \cf9 position\cf5 : \cf4 "absolute"\cf2 ,\
                \cf5 \}\}\
                \cf11 key\cf4 =\cf5 \{i\}\
              \cf10 ></div>\
            \cf5 ))\
          ) : (\
            \cf10 <div \cf11 className\cf4 ="empty"\cf10 >\
              <h1>\cf5 Board is empty\cf10 </h1>\
            </div>\
          \cf5 )\}\
        \cf10 </div>\
\
        <div \cf11 className\cf4 ="actions-div"\cf10 >\
          <h2>\cf5 Board dimensions: 1000x1000\cf10 </h2>\
          <h2>\cf5 Box count:\{squares.\cf9 length\cf5 \}\cf10 </h2>\
          <div>\
            <button\
              \cf11 className\cf4 ="add-btn"\
              \cf11 onClick\cf4 =\cf5 \{() => \cf6 onClick\cf5 ()\}\
              \cf11 style\cf4 =\cf5 \{\{ \cf9 marginInline\cf5 : \cf4 "18px" \cf5 \}\}\
            \cf10 >\
              \cf5 Add\
            \cf10 </button>\
            <button \cf11 className\cf4 ="clear-btn" \cf11 onClick\cf4 =\cf5 \{() => \cf6 onClear\cf5 ()\}\cf10 >\
              \cf5 Clear\
            \cf10 </button>\
          </div>\
        </div>\
      </div>\
    </div>\
  \cf5 )\cf2 ;\
\cf5 \}\cf2 ;\
\
export default \cf6 App\cf2 ;\
}